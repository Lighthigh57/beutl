<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var numberTypes = new Type[]
    {
        typeof(byte),
        typeof(decimal),
        typeof(double),
        typeof(float),
        typeof(short),
        typeof(int),
        typeof(long),
        typeof(sbyte),
        typeof(ushort),
        typeof(uint),
        typeof(ulong),
    };
#>
#pragma warning disable IDE0001, IDE0049

namespace Beutl.Services.Editors
{
<# foreach(var t in numberTypes) { #>
    public sealed class <#= t.Name #>EditorService : INumberEditorService<<#= t.FullName #>>
    {
        public <#= t.FullName #> Decrement(<#= t.FullName #> value, int increment)
        {
<# if (t == typeof(uint) || t == typeof(ulong)) { #>
            return value - (<#= t.FullName #>)increment;
<# } else if (t == typeof(ushort) || t == typeof(short) || t == typeof(sbyte) || t == typeof(byte)) { #>
            return (<#= t.FullName #>)(value - increment);
<# } else { #>
            return value - increment;
<# } #>
        }

        public <#= t.FullName #> Increment(<#= t.FullName #> value, int increment)
        {
<# if (t == typeof(uint) || t == typeof(ulong)) { #>
            return value + (<#= t.FullName #>)increment;
<# } else if (t == typeof(ushort) || t == typeof(short) || t == typeof(sbyte) || t == typeof(byte)) { #>
            return (<#= t.FullName #>)(value + increment);
<# } else { #>
            return value + increment;
<# } #>
        }

        public bool TryParse(string? s, out <#= t.FullName #> result)
        {
            return <#= t.FullName #>.TryParse(s, out result);
        }
    }
<# } #>
}
