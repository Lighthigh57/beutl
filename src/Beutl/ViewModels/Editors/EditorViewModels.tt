<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var vec2Types = new (string Namespace, string Name, string Element)[]
    {
        ("Media", "PixelPoint", "int"),
        ("Media", "PixelSize", "int"),
        ("Graphics", "Point", "float"),
        ("Graphics", "Size", "float"),
        ("Graphics", "Vector", "float"),
        ("Graphics", "RelativePoint", "float"),
        ("System.Numerics", "Vector2", "float"),
    };

    var vec3Types = new (string Namespace, string Name, string Element)[]
    {
        ("System.Numerics", "Vector3", "float"),
    };

    var vec4Types = new (string Namespace, string Name, string Element)[]
    {
        ("Beutl.Media", "PixelRect", "int"),
        ("Beutl.Media", "CornerRadius", "float"),
        ("Beutl.Graphics", "Thickness", "float"),
        ("Beutl.Graphics", "Rect", "float"),
        ("System.Numerics", "Vector4", "float"),
    };
#>
using Beutl.Framework;

using Reactive.Bindings;
using Reactive.Bindings.Extensions;

namespace Beutl.ViewModels.Editors
{
    // Vector2
<# foreach(var t in vec2Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>EditorViewModel : BaseEditorViewModel<<#= fullName #>>
    {
        public <#= t.Name #>EditorViewModel(IAbstractProperty<<#= fullName #>> property)
            : base(property)
        {
            Value = property.GetObservable()
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);
        }

        public ReadOnlyReactivePropertySlim<<#= fullName #>> Value { get; }
    }
<# } #>

    // Vector3
<# foreach(var t in vec3Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>EditorViewModel : BaseEditorViewModel<<#= fullName #>>
    {
        public <#= t.Name #>EditorViewModel(IAbstractProperty<<#= fullName #>> property)
            : base(property)
        {
            Value = property.GetObservable()
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);
        }

        public ReadOnlyReactivePropertySlim<<#= fullName #>> Value { get; }
    }
<# } #>

    // Vector4
<# foreach(var t in vec4Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>EditorViewModel : BaseEditorViewModel<<#= fullName #>>
    {
        public <#= t.Name #>EditorViewModel(IAbstractProperty<<#= fullName #>> property)
            : base(property)
        {
            Value = property.GetObservable()
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);
        }

        public ReadOnlyReactivePropertySlim<<#= fullName #>> Value { get; }
    }
<# } #>
}
