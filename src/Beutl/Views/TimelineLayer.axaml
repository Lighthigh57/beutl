<UserControl x:Class="Beutl.Views.TimelineLayer"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:icons="using:FluentIcons.FluentAvalonia"
             xmlns:lang="using:Beutl.Language"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ui="using:FluentAvalonia.UI.Controls"
             xmlns:vm="using:Beutl.ViewModels"
             x:Name="root"
             Height="{DynamicResource LayerHeight}"
             Margin="{CompiledBinding Margin.Value}"
             Padding="0,1"
             HorizontalAlignment="Stretch"
             VerticalAlignment="Top"
             d:DesignHeight="450"
             d:DesignWidth="800"
             x:DataType="vm:TimelineLayerViewModel"
             ClipToBounds="True"
             Focusable="True"
             IsEnabled="{CompiledBinding IsEnabled.Value}"
             mc:Ignorable="d">
    <UserControl.KeyBindings>
        <KeyBinding Command="{CompiledBinding Cut}" Gesture="{DynamicResource CutKeyGesture}" />
        <KeyBinding Command="{CompiledBinding Copy}" Gesture="{DynamicResource CopyKeyGesture}" />
        <KeyBinding Command="{CompiledBinding Delete}" Gesture="{DynamicResource LayerDeleteKeyGesture}" />
        <KeyBinding Command="{CompiledBinding Exclude}" Gesture="{DynamicResource DeleteKeyGesture}" />
    </UserControl.KeyBindings>
    <Border x:Name="border"
            Width="{CompiledBinding Width.Value}"
            Margin="{CompiledBinding BorderMargin.Value}"
            HorizontalAlignment="Left"
            Background="{CompiledBinding Color.Value, Converter={StaticResource ColorToBrushConverter}}"
            BorderBrush="{DynamicResource TextControlForeground}"
            Classes.selected="{CompiledBinding IsSelected.Value}">
        <Border.Styles>
            <Style Selector="Border.selected">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="-1" />
            </Style>
        </Border.Styles>
        <Border.Resources>
            <Thickness x:Key="MenuFlyoutItemPlaceholderThemeThickness">0,0,0,0</Thickness>
            <Thickness x:Key="MenuFlyoutItemDoublePlaceholderThemeThickness">28,0,0,0</Thickness>
        </Border.Resources>
        <Border.ContextFlyout>
            <ui:FAMenuFlyout>
                <ui:MenuFlyoutItem Command="{CompiledBinding Split}"
                                   CommandParameter="{Binding #root.GetClickedTime, Mode=OneTime}"
                                   Text="{x:Static lang:Strings.Split}">
                    <ui:MenuFlyoutItem.Icon>
                        <icons:SymbolIcon Symbol="SplitVertical" />
                    </ui:MenuFlyoutItem.Icon>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{CompiledBinding Cut}"
                                   InputGesture="{DynamicResource CutKeyGesture}"
                                   Text="{x:Static lang:Strings.Cut}">
                    <ui:MenuFlyoutItem.Icon>
                        <icons:SymbolIcon Symbol="Cut" />
                    </ui:MenuFlyoutItem.Icon>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{CompiledBinding Copy}"
                                   InputGesture="{DynamicResource CopyKeyGesture}"
                                   Text="{x:Static lang:Strings.Copy}">
                    <ui:MenuFlyoutItem.Icon>
                        <icons:SymbolIcon Symbol="Copy" />
                    </ui:MenuFlyoutItem.Icon>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{CompiledBinding Delete}"
                                   InputGesture="{DynamicResource LayerDeleteKeyGesture}"
                                   Text="{x:Static lang:Strings.Delete}">
                    <ui:MenuFlyoutItem.Icon>
                        <icons:SymbolIcon Symbol="DeleteDismiss" />
                    </ui:MenuFlyoutItem.Icon>
                </ui:MenuFlyoutItem>
                <ui:MenuFlyoutItem Command="{CompiledBinding Exclude}"
                                   InputGesture="{DynamicResource DeleteKeyGesture}"
                                   Text="{x:Static lang:Strings.Exclude}">
                    <ui:MenuFlyoutItem.Icon>
                        <icons:SymbolIcon Symbol="Delete" />
                    </ui:MenuFlyoutItem.Icon>
                </ui:MenuFlyoutItem>
                <ui:ToggleMenuFlyoutItem Click="AllowOutflowClick"
                                         IsChecked="{CompiledBinding AllowOutflow.Value, Mode=OneWay}"
                                         Text="流入出を許可">
                    <ui:ToggleMenuFlyoutItem.Styles>
                        <Style Selector="ui|ToggleMenuFlyoutItem /template/ Viewbox#IconRoot">
                            <Setter Property="Width" Value="0" />
                        </Style>
                    </ui:ToggleMenuFlyoutItem.Styles>
                </ui:ToggleMenuFlyoutItem>
                <ui:MenuFlyoutSeparator />
                <ui:MenuFlyoutSubItem Text="{x:Static lang:Strings.Animation}">
                    <ui:MenuFlyoutItem Command="{CompiledBinding FinishEditingAnimation}" Text="{x:Static lang:Strings.FinishEditing}" />
                    <ui:MenuFlyoutItem Command="{CompiledBinding BringAnimationToTop}" Text="{x:Static lang:Strings.BringToTop}" />
                </ui:MenuFlyoutSubItem>
                <ui:MenuFlyoutSeparator />
                <ui:ToggleMenuFlyoutItem Click="UseNodeClick"
                                         IsChecked="{CompiledBinding UseNode.Value}"
                                         Text="ノードを使う">
                    <ui:ToggleMenuFlyoutItem.Styles>
                        <Style Selector="ui|ToggleMenuFlyoutItem /template/ Viewbox#IconRoot">
                            <Setter Property="Width" Value="0" />
                        </Style>
                    </ui:ToggleMenuFlyoutItem.Styles>
                </ui:ToggleMenuFlyoutItem>
                <ui:MenuFlyoutItem Click="OpenNodeTree_Click" Text="ノードツリーを開く">
                    <ui:MenuFlyoutItem.Icon>
                        <icons:SymbolIcon Symbol="Open" />
                    </ui:MenuFlyoutItem.Icon>
                </ui:MenuFlyoutItem>
            </ui:FAMenuFlyout>
        </Border.ContextFlyout>
        <Panel>
            <TextBlock x:Name="textBlock" Text="{CompiledBinding Name.Value}" />
            <TextBox x:Name="textBox"
                     HorizontalAlignment="Stretch"
                     IsVisible="False"
                     Text="{CompiledBinding Name.Value}" />
        </Panel>
    </Border>

</UserControl>
