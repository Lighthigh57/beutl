<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var vec2Types = new (string Namespace, string Name, string Element, string FieldX, string FieldY, bool IsSize)[]
    {
        ("Beutl.Media", "PixelPoint", "System.Int32", "X", "Y", false),
        ("Beutl.Media", "PixelSize", "System.Int32", "Width", "Height", true),
        ("Beutl.Graphics", "Point", "System.Single", "X", "Y", false),
        ("Beutl.Graphics", "Size", "System.Single", "Width", "Height", true),
        ("Beutl.Graphics", "Vector", "System.Single", "X", "Y", false),
        ("System.Numerics", "Vector2", "System.Single", "X", "Y", false),
    };

    var vec3Types = new (string Namespace, string Name, string Element, string FieldX, string FieldY, string FieldZ)[]
    {
        ("System.Numerics", "Vector3", "System.Single", "X", "Y", "Z"),
    };

    var vec4Types = new (string Namespace, string Name, string Element, string FieldX, string FieldY, string FieldZ, string FieldW, bool IsRect)[]
    {
        ("Beutl.Media", "PixelRect", "System.Int32", "X", "Y", "Width", "Height", true),
        ("Beutl.Graphics", "Rect", "System.Single", "X", "Y", "Width", "Height", true),
        ("System.Numerics", "Vector4", "System.Single", "X", "Y", "Z", "W", false),
    };
#>
using Avalonia;
using Avalonia.Controls;
using Avalonia.Data;
using Avalonia.Markup.Xaml.MarkupExtensions;

using Beutl.ViewModels.Editors;

#pragma warning disable IDE0001, IDE0049

namespace Beutl.Views.Editors
{
    // Vector2
<# foreach(var t in vec2Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>Editor : BaseVector2Editor<<#= fullName #>>
    {
        private static readonly Binding s_x = new("Value.Value.<#= t.FieldX #>", BindingMode.OneWay);
        private static readonly Binding s_y = new("Value.Value.<#= t.FieldY #>", BindingMode.OneWay);

        public <#= t.Name #>Editor()
        {
<# if (t.IsSize) { #>
            xText.Text = Strings.Width;
            yText.Text = Strings.Height;
<# } else { #>
            xText.Text = "X";
            yText.Text = "Y";
<# } #>

            xTextBox[!TextBox.TextProperty] = s_x;
            yTextBox[!TextBox.TextProperty] = s_y;
        }

        protected override <#= fullName #> IncrementX(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #> + increment,
                value.<#= t.FieldY #>);
        }

        protected override <#= fullName #> IncrementY(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #>,
                value.<#= t.FieldY #> + increment);
        }

        protected override bool TryParse(string? x, string? y, out <#= fullName #> value)
        {
            if (<#= t.Element #>.TryParse(x, out <#= t.Element #> xi) && <#= t.Element #>.TryParse(y, out <#= t.Element #> yi))
            {
                value = new <#= fullName #>(xi, yi);
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }
    }
<# } #>

    // Vector3
<# foreach(var t in vec3Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>Editor : BaseVector3Editor<<#= fullName #>>
    {
        private static readonly Binding s_x = new("Value.Value.<#= t.FieldX #>", BindingMode.OneWay);
        private static readonly Binding s_y = new("Value.Value.<#= t.FieldY #>", BindingMode.OneWay);
        private static readonly Binding s_z = new("Value.Value.<#= t.FieldZ #>", BindingMode.OneWay);

        public <#= t.Name #>Editor()
        {
            xText.Text = "X";
            yText.Text = "Y";
            zText.Text = "Z";

            xTextBox[!TextBox.TextProperty] = s_x;
            yTextBox[!TextBox.TextProperty] = s_y;
            zTextBox[!TextBox.TextProperty] = s_z;
        }

        protected override <#= fullName #> IncrementX(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #> + increment,
                value.<#= t.FieldY #>,
                value.<#= t.FieldZ #>);
        }

        protected override <#= fullName #> IncrementY(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #>,
                value.<#= t.FieldY #> + increment,
                value.<#= t.FieldZ #>);
        }

        protected override <#= fullName #> IncrementZ(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #>,
                value.<#= t.FieldY #>,
                value.<#= t.FieldZ #> + increment);
        }

        protected override bool TryParse(string? x, string? y, string? z, out <#= fullName #> value)
        {
            if (<#= t.Element #>.TryParse(x, out <#= t.Element #> xi)
                && <#= t.Element #>.TryParse(y, out <#= t.Element #> yi)
                && <#= t.Element #>.TryParse(z, out <#= t.Element #> zi))
            {
                value = new <#= fullName #>(xi, yi, zi);
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }
    }
<# } #>

    // Vector4
<# foreach(var t in vec4Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>Editor : BaseVector4Editor<<#= fullName #>>
    {
        private static readonly Binding s_x = new("Value.Value.<#= t.FieldX #>", BindingMode.OneWay);
        private static readonly Binding s_y = new("Value.Value.<#= t.FieldY #>", BindingMode.OneWay);
        private static readonly Binding s_z = new("Value.Value.<#= t.FieldZ #>", BindingMode.OneWay);
        private static readonly Binding s_w = new("Value.Value.<#= t.FieldW #>", BindingMode.OneWay);

        public <#= t.Name #>Editor()
        {
            xText.Text = "X";
            yText.Text = "Y";
<# if (t.IsRect) { #>
            zText.Text = Strings.Width;
            wText.Text = Strings.Height;
<# } else { #>
            zText.Text = "Z";
            wText.Text = "W";
<# } #>

            xTextBox[!TextBox.TextProperty] = s_x;
            yTextBox[!TextBox.TextProperty] = s_y;
            zTextBox[!TextBox.TextProperty] = s_z;
            wTextBox[!TextBox.TextProperty] = s_w;
        }

        protected override <#= fullName #> IncrementX(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #> + increment,
                value.<#= t.FieldY #>,
                value.<#= t.FieldZ #>,
                value.<#= t.FieldW #>);
        }

        protected override <#= fullName #> IncrementY(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #>,
                value.<#= t.FieldY #> + increment,
                value.<#= t.FieldZ #>,
                value.<#= t.FieldW #>);
        }

        protected override <#= fullName #> IncrementZ(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #>,
                value.<#= t.FieldY #>,
                value.<#= t.FieldZ #> + increment,
                value.<#= t.FieldW #>);
        }

        protected override <#= fullName #> IncrementW(<#= fullName #> value, int increment)
        {
            return new <#= fullName #>(
                value.<#= t.FieldX #>,
                value.<#= t.FieldY #>,
                value.<#= t.FieldZ #>,
                value.<#= t.FieldW #> + increment);
        }

        protected override bool TryParse(string? x, string? y, string? z, string? w, out <#= fullName #> value)
        {
            if (<#= t.Element #>.TryParse(x, out <#= t.Element #> xi)
                && <#= t.Element #>.TryParse(y, out <#= t.Element #> yi)
                && <#= t.Element #>.TryParse(z, out <#= t.Element #> zi)
                && <#= t.Element #>.TryParse(w, out <#= t.Element #> wi))
            {
                value = new <#= fullName #>(xi, yi, zi, wi);
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }
    }
<# } #>
}
