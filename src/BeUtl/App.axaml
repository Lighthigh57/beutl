<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="using:BeUtl"
             xmlns:ui="using:FluentAvalonia.UI.Controls"
             xmlns:uip="using:FluentAvalonia.UI.Controls.Primitives"
             xmlns:convert="using:BeUtl.Converters"
             xmlns:aconverters="using:Avalonia.Markup.Xaml.Converters"
             x:Class="BeUtl.App">
    <Application.Resources>
        <convert:PixelSizeConverter x:Key="PixelSizeConverter" />
        <convert:TimeSpanToDoubleConverter x:Key="TimeSpanToDoubleConverter" />
        <aconverters:ColorToBrushConverter x:Key="ColorToBrushConverter" />
    </Application.Resources>
    <Application.Styles>
        <StyleInclude Source="avares://BeUtl.Controls/Styles.axaml" />

        <Style Selector="TextBlock.ErrorTextBlockStyle">
            <Setter Property="Foreground" Value="{DynamicResource SystemFillColorCriticalBrush}" />
            <Setter Property="Opacity" Value="0.7" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="FontSize" Value="12" />
        </Style>
        
        <Style Selector="Button.breadcrumb">
            <Setter Property="FontFamily" Value="XamlAutoFontFamily" />
            <Setter Property="FontSize" Value="24" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
        </Style>

        <Style Selector="Button.breadcrumb /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Transitions">
                <Transitions />
            </Setter>
        </Style>

        <Style Selector="Button.breadcrumb:pointerover /template/ Border#BorderElement">
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
        <Style Selector="Button.breadcrumb:pointerover /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource ButtonForeground}" />
        </Style>

        <Style Selector="Button.breadcrumb:pointerover /template/ Border#BorderElement">
            <Setter Property="BorderBrush" Value="Transparent" />
        </Style>
        <Style Selector="Button.breadcrumb:pressed /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource ButtonForeground}" />
            <Setter Property="Opacity" Value="0.5" />
        </Style>

        <Style Selector="Label.breadcrumb">
            <Setter Property="FontFamily" Value="{DynamicResource SymbolThemeFontFamily}" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Content" Value="&#xE974;" />
        </Style>

        <Style Selector="TextBlock.breadcrumb">
            <Setter Property="FontFamily" Value="{DynamicResource SymbolThemeFontFamily}" />
            <Setter Property="FontSize" Value="24" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
            <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style Selector="ui|TabView.bottom">
            <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
            <Setter Property="Padding" Value="2,0,2,8" />
            <Setter Property="Template">
                <ControlTemplate>
                    <Grid RowDefinitions="*,Auto">

                        <ContentPresenter Name="TabContentPresenter"
                                          Background="{DynamicResource CardBackgroundFillColorDefaultBrush}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          CornerRadius="{TemplateBinding CornerRadius}"
                                          BorderThickness="{TemplateBinding BorderThickness}" />

                        <Grid Name="TabContainerGrid" Grid.Row="1"
                              Background="{TemplateBinding Background}">

                            <Grid.ColumnDefinitions>
                                <!-- x:Name="LeftContentColumn -->
                                <ColumnDefinition Width="Auto" MinWidth="2" />
                                <!-- x:Name="TabColumn" -->
                                <ColumnDefinition Width="Auto" />
                                <!-- x:Name="AddButtonColumn" -->
                                <ColumnDefinition Width="Auto" />
                                <!-- x:Name="RightContentColumn"-->
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Border Name="LeftBottomBorderLine"
                                    BorderBrush="{DynamicResource TabViewBorderBrush}"
                                    BorderThickness="1" Height="1"
                                    VerticalAlignment="Top"/>

                            <Border Name="RightBottomBorderLine"
                                    BorderBrush="{DynamicResource TabViewBorderBrush}"
                                    BorderThickness="1" Height="1"
                                    Grid.Column="2" Grid.ColumnSpan="2"
                                    VerticalAlignment="Top"/>

                            <ContentPresenter
                                    Grid.Column="0"
                                    Name="LeftContentPresenter"
                                    Content="{TemplateBinding TabStripHeader}"
                                    ContentTemplate="{TemplateBinding TabStripHeaderTemplate}"/>

                            <uip:TabViewListView Grid.Column="1"
                                                 Classes="bottom"
                                                 Name="TabListView"
                                                 Padding="{TemplateBinding Padding}"
                                                 Items="{TemplateBinding TabItems}"
                                                 ItemTemplate="{TemplateBinding TabItemTemplate}"
                                                 CanReorderItems="{TemplateBinding CanReorderTabs}"
                                                 CanDragItems="{TemplateBinding CanDragTabs}"
                                                 DragDrop.AllowDrop="{TemplateBinding AllowDropTabs}" />

                            <Border IsVisible="{Binding IsAddTabButtonVisible, RelativeSource={RelativeSource TemplatedParent}}"
                                     Grid.Column="2"
                                     Padding="{DynamicResource TabViewItemAddButtonContainerPadding}"
                                     VerticalAlignment="Bottom">
                                <ui:Button Name="AddButton"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Content="&#xE710;"
                                           Command="{TemplateBinding AddTabButtonCommand}"
                                           CommandParameter="{TemplateBinding AddTabButtonCommandParameter}"
                                           Classes="TabViewButtonStyle" />
                            </Border>

                            <ContentPresenter Grid.Column="3"
                                              Name="RightContentPresenter"
                                              HorizontalAlignment="Stretch"
                                              Content="{TemplateBinding TabStripFooter}"
                                              ContentTemplate="{TemplateBinding TabStripFooterTemplate}"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter>
        </Style>

        <Style Selector="uip|TabViewListView.bottom">
        </Style>

        <Style Selector="uip|TabViewListView.bottom > ui|TabViewItem">
            <Setter Property="Template">
                <ControlTemplate>
                    <Border Name="LayoutRootBorder"
                            Padding="{TemplateBinding Padding}">
                        <Grid Name="LayoutRoot">

                            <Grid.ColumnDefinitions>
                                <!-- x:Name = "LeftColumn" -->
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <!-- x:Name = "RightColumn" -->
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Border Name="BottomBorderLine" />

                            <Path Name="LeftRadiusRenderArc" />

                            <Path Name="RightRadiusRenderArc" />

                            <Path Name="SelectedBackgroundPath" />

                            <Border Name="TabSeparator" />

                            <Border Name="TabContainerBorder"
                                    Grid.Column="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    TemplatedControl.IsTemplateFocusTarget="True"
                                    CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}">

                                <Grid Name="TabContainer">
                                    <Grid.ColumnDefinitions>
                                        <!-- x:Name = "IconColumn" -->
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <!-- Since we can't change the icon column in the styles, to avoid locking it in
                                code, we use this Rectangle as the sizer for the column -->
                                    <Rectangle HorizontalAlignment="Stretch"
                                               VerticalAlignment="Stretch"
                                               Name="IconColumn" />

                                    <Viewbox Name="IconBox"
                                             MaxWidth="{DynamicResource TabViewItemHeaderIconSize}"
                                             MaxHeight="{DynamicResource TabViewItemHeaderIconSize}">
                                        <ContentControl Name="IconControl"
                                                        Content="{Binding TabViewTemplateSettings.IconElement, RelativeSource={RelativeSource TemplatedParent}}"
                                                        KeyboardNavigation.IsTabStop="False" />
                                    </Viewbox>

                                    <!-- If we template bind the ContentPresenter's Content property to the TabViewItem.Header property
                                 we unfortunately run into the following issue if the header is [null] or empty:
                                 The TabViewItem.Content property will be implictly bound to the Content property of the ContentPresenter.
                                 To prevent this, we explicitly set a default empty content here and update the content in code behind. -->

                                    <ContentPresenter Name="ContentPresenter"
                                                      Grid.Column="1"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      Content=""
                                                      ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                      TextBlock.FontWeight="{TemplateBinding FontWeight}" />

                                    <ui:Button Name="CloseButton"
                                               Grid.Column="2"
                                               Margin="{DynamicResource TabViewItemHeaderCloseMargin}"
                                               Content="&#xE711;"
                                               Classes="TabViewCloseButtonStyle"
                                               KeyboardNavigation.IsTabStop="False"/>
                                </Grid>
                            </Border>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter>
        </Style>
        <Style Selector="uip|TabViewListView.bottom > ui|TabViewItem:selected /template/ Border#TabContainerBorder">
            <Setter Property="BorderThickness" Value="1,0,1,1" />
        </Style>
    </Application.Styles>
</Application>
