<UserControl
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:BeUtl.Views"
    xmlns:editors="using:BeUtl.Views.Editors"
    xmlns:ui="using:FluentAvalonia.UI.Controls"
    xmlns:uip="using:FluentAvalonia.UI.Controls.Primitives"
    xmlns:vm="using:BeUtl.ViewModels"
    mc:Ignorable="d" d:DesignWidth="1280" d:DesignHeight="720"
    x:DataType="vm:EditViewModel"
    x:Class="BeUtl.Views.EditView">
    <UserControl.Styles>
        <Style Selector="GridSplitter.EditViewSplitter">
            <Setter Property="Background" Value="Transparent" />
        </Style>
        <Style Selector="ui|TabView.bottom">
            <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
            <Setter Property="Padding" Value="2,0,2,8" />
            <Setter Property="Template">
                <ControlTemplate>
                    <Grid RowDefinitions="*,Auto">

                        <ContentPresenter Name="TabContentPresenter"
                                          Background="{DynamicResource CardBackgroundFillColorDefaultBrush}"
                                          BorderBrush="{TemplateBinding BorderBrush}"
                                          CornerRadius="{TemplateBinding CornerRadius}"
                                          BorderThickness="{TemplateBinding BorderThickness}" />

                        <Grid Name="TabContainerGrid" Grid.Row="1"
                              Background="{TemplateBinding Background}">

                            <Grid.ColumnDefinitions>
                                <!-- x:Name="LeftContentColumn -->
                                <ColumnDefinition Width="Auto" MinWidth="2" />
                                <!-- x:Name="TabColumn" -->
                                <ColumnDefinition Width="Auto" />
                                <!-- x:Name="AddButtonColumn" -->
                                <ColumnDefinition Width="Auto" />
                                <!-- x:Name="RightContentColumn"-->
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Border Name="LeftBottomBorderLine"
                                    BorderBrush="{DynamicResource TabViewBorderBrush}"
                                    BorderThickness="1" Height="1"
                                    VerticalAlignment="Top"/>

                            <Border Name="RightBottomBorderLine"
                                    BorderBrush="{DynamicResource TabViewBorderBrush}"
                                    BorderThickness="1" Height="1"
                                    Grid.Column="2" Grid.ColumnSpan="2"
                                    VerticalAlignment="Top"/>

                            <ContentPresenter
                                    Grid.Column="0"
                                    Name="LeftContentPresenter"
                                    Content="{TemplateBinding TabStripHeader}"
                                    ContentTemplate="{TemplateBinding TabStripHeaderTemplate}"/>

                            <uip:TabViewListView Grid.Column="1"
                                                 Classes="bottom"
                                                 Name="TabListView"
                                                 Padding="{TemplateBinding Padding}"
                                                 Items="{TemplateBinding TabItems}"
                                                 ItemTemplate="{TemplateBinding TabItemTemplate}"
                                                 CanReorderItems="{TemplateBinding CanReorderTabs}"
                                                 CanDragItems="{TemplateBinding CanDragTabs}"
                                                 DragDrop.AllowDrop="{TemplateBinding AllowDropTabs}" />

                            <Border IsVisible="{Binding IsAddTabButtonVisible, RelativeSource={RelativeSource TemplatedParent}}"
                                     Grid.Column="2"
                                     Padding="{DynamicResource TabViewItemAddButtonContainerPadding}"
                                     VerticalAlignment="Bottom">
                                <ui:Button Name="AddButton"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Content="&#xE710;"
                                           Command="{TemplateBinding AddTabButtonCommand}"
                                           CommandParameter="{TemplateBinding AddTabButtonCommandParameter}"
                                           Classes="TabViewButtonStyle" />
                            </Border>

                            <ContentPresenter Grid.Column="3"
                                              Name="RightContentPresenter"
                                              HorizontalAlignment="Stretch"
                                              Content="{TemplateBinding TabStripFooter}"
                                              ContentTemplate="{TemplateBinding TabStripFooterTemplate}"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter>
        </Style>

        <Style Selector="uip|TabViewListView.bottom">
        </Style>
        
        <Style Selector="uip|TabViewListView.bottom > ui|TabViewItem">
            <Setter Property="Template">
                <ControlTemplate>
                        <Border Name="LayoutRootBorder"
                                Padding="{TemplateBinding Padding}">
                            <Grid Name="LayoutRoot">

                                <Grid.ColumnDefinitions>
                                    <!-- x:Name = "LeftColumn" -->
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <!-- x:Name = "RightColumn" -->
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Border Name="BottomBorderLine" />

                                <Path Name="LeftRadiusRenderArc" />

                                <Path Name="RightRadiusRenderArc" />

                                <Path Name="SelectedBackgroundPath" />

                                <Border Name="TabSeparator" />

                                <Border Name="TabContainerBorder"
                                        Grid.Column="1"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        TemplatedControl.IsTemplateFocusTarget="True"
                                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomCornerRadiusFilterConverter}}">

                                        <Grid Name="TabContainer">
                                            <Grid.ColumnDefinitions>
                                                <!-- x:Name = "IconColumn" -->
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <!-- Since we can't change the icon column in the styles, to avoid locking it in
                                code, we use this Rectangle as the sizer for the column -->
                                            <Rectangle HorizontalAlignment="Stretch"
                                                       VerticalAlignment="Stretch"
                                                       Name="IconColumn" />

                                            <Viewbox Name="IconBox"
                                                     MaxWidth="{DynamicResource TabViewItemHeaderIconSize}"
                                                     MaxHeight="{DynamicResource TabViewItemHeaderIconSize}">
                                                <ContentControl Name="IconControl"
                                                                Content="{Binding TabViewTemplateSettings.IconElement, RelativeSource={RelativeSource TemplatedParent}}"
                                                                KeyboardNavigation.IsTabStop="False" />
                                            </Viewbox>

                                            <!-- If we template bind the ContentPresenter's Content property to the TabViewItem.Header property
                                 we unfortunately run into the following issue if the header is [null] or empty:
                                 The TabViewItem.Content property will be implictly bound to the Content property of the ContentPresenter.
                                 To prevent this, we explicitly set a default empty content here and update the content in code behind. -->

                                            <ContentPresenter Name="ContentPresenter"
                                                              Grid.Column="1"
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                              Content=""
                                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                              TextBlock.FontWeight="{TemplateBinding FontWeight}" />

                                            <ui:Button Name="CloseButton"
                                                       Grid.Column="2"
                                                       Margin="{DynamicResource TabViewItemHeaderCloseMargin}"
                                                       Content="&#xE711;"
                                                       Classes="TabViewCloseButtonStyle"
                                                       KeyboardNavigation.IsTabStop="False"/>
                                        </Grid>
                                </Border>

                            </Grid>
                        </Border>
                </ControlTemplate>
            </Setter>
        </Style>
        <Style Selector="uip|TabViewListView.bottom > ui|TabViewItem:selected /template/ Border#TabContainerBorder">
            <Setter Property="BorderThickness" Value="1,0,1,1" />
        </Style>
    </UserControl.Styles>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="7*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="2*" MinWidth="300" />
        </Grid.ColumnDefinitions>

        <!--RightPanel-->
        <ui:TabView
            Grid.Column="4"
            Margin="0,4,0,0"
            CornerRadius="4,0,0,4"
            SelectedIndex="0"
            TabWidthMode="SizeToContent"
            VerticalAlignment="Stretch"
            Classes="bottom"
            x:Name="RightTabView"
            IsAddTabButtonVisible="False">
            <ui:TabView.Styles>
                <Style Selector="ui|TabViewItem">
                    <Setter Property="IsClosable" Value="False" />
                </Style>
            </ui:TabView.Styles>
            <ui:TabViewItem Header="{DynamicResource S.EditView.Properties}">
                <editors:PropertiesEditor x:Name="propertiesEditor" DataContext="{Binding Property.Value}" />
            </ui:TabViewItem>
            <!--
                NOTE: Heightを指定しないと1pxの誤差が出るので
                      高さをpropertiesEditorとバインドしています
            -->
            <ui:TabViewItem Header="{DynamicResource S.EditView.Easings}">
                <local:Easings DataContext="{CompiledBinding Easings}" Height="{Binding #propertiesEditor.Bounds.Height}" />
            </ui:TabViewItem>
            <ui:TabViewItem Header="{DynamicResource S.EditView.Explorer}" >
                <ScrollViewer x:Name="Explorer" Height="{Binding #propertiesEditor.Bounds.Height}" />
            </ui:TabViewItem>
        </ui:TabView>

        <!--LeftPanel-->
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" MinHeight="300" />
            </Grid.RowDefinitions>

            <!--BottomPanel-->
            <ui:TabView
                Grid.Row="2"
                x:Name="BottomTabView"
                Margin="2,0,0,0"
                TabWidthMode="SizeToContent"
                VerticalAlignment="Stretch"
                Classes="bottom"
                IsAddTabButtonVisible="False">
                <ui:TabView.Styles>
                    <Style Selector="ui|TabViewItem">
                        <Setter Property="IsClosable" Value="False" />
                    </Style>
                </ui:TabView.Styles>
                <ui:TabViewItem Header="{DynamicResource S.EditView.Timeline}">
                    <local:Timeline DataContext="{CompiledBinding Timeline}" x:Name="timeline" />
                </ui:TabViewItem>
            </ui:TabView>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="270" />
                </Grid.ColumnDefinitions>
                <Border
                    Classes="CardStyle"
                    Grid.Column="2"
                    Margin="0,4,0,0">
                    <local:Library />
                </Border>

                <GridSplitter
                    Grid.Column="1"
                    Classes="EditViewSplitter" />

                <Player
                    x:Name="Player"
                    Margin="4,0"
                    IsPlaying="{CompiledBinding Player.IsPlaying.Value, Mode=TwoWay}"
                    PlayButtonClick="Player_PlayButtonClick"
                    NextButtonClick="Player_NextButtonClick"
                    PreviousButtonClick="Player_PreviousButtonClick"
                    StartButtonClick="Player_StartButtonClick"
                    EndButtonClick="Player_EndButtonClick"
                    Maximum="{Binding Scene.Duration, Converter={StaticResource TimeSpanToDoubleConverter}}"
                    Value="{Binding Scene.CurrentFrame, Converter={StaticResource TimeSpanToDoubleConverter}}"
                    Duration="{Binding Scene.Duration, StringFormat={}{0:hh\\:mm\\:ss\\.ff}}"
                    CurrentTime="{Binding Scene.CurrentFrame, StringFormat={}{0:hh\\:mm\\:ss\\.ff}}" />
            </Grid>

            <GridSplitter
                Grid.Row="1"
                Classes="EditViewSplitter" />

        </Grid>

        <GridSplitter
            Grid.Column="1"
            Classes="EditViewSplitter" />

    </Grid>
</UserControl>
